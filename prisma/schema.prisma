datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../node_modules/@generated/type-graphql"
}

model OfferItem {
  id String @id @default(cuid())

  itemType             Int
  token                String
  identifierOrCriteria String
  startAmount          BigInt
  endAmount            BigInt

  order     Order  @relation(fields: [orderHash], references: [hash], onDelete: Cascade)
  orderHash String
}

model ConsiderationItem {
  id String @id @default(cuid())

  itemType             Int
  token                String
  identifierOrCriteria String
  startAmount          BigInt
  endAmount            BigInt

  recipient String

  order     Order  @relation(fields: [orderHash], references: [hash], onDelete: Cascade)
  orderHash String
}

model Order {
  hash String @id @unique

  offer         OfferItem[]
  consideration ConsiderationItem[]

  offerer    String
  signature  String
  orderType  Int
  startTime  Int
  endTime    Int
  counter    Int
  salt       String
  conduitKey String
  zone       String
  zoneHash   String

  // Basic Order
  additionalRecipients String? /// comma-separated

  // Advanced Order
  numerator   BigInt?
  denominator BigInt?
  extraData   String?

  // Metadata
  chainId       String /// string decimal
  metadata OrderMetadata?

}

model OrderMetadata {
  orderHash String   @id
  createdAt DateTime @default(now())

  isValid     Boolean
  isExpired   Boolean
  isCancelled Boolean

  isAuction Boolean /// when order is restricted and zone is an EOA. in the future may have whitelisted "auction" zones

  isFullyFulfilled     Boolean
  lastFulfilledAt      DateTime?
  lastFulfilledPrice   BigInt?

  isPinned  Boolean @default(false)
  isRemoved Boolean @default(false)

  lastValidatedBlockNumber String?
  lastValidatedBlockHash   String?

  order     Order  @relation(fields: [orderHash], references: [hash], onDelete: Cascade)

}

model NodeStatus {
  chainId                           String   @id /// string decimal
  ethRPCRequestsSentInCurrentUTCDay Int      @default(0)
  startOfCurrentUTCDay              DateTime @default(now())
}

model Criteria {
  hash               String               @id
  tokenIdForCriteria TokenIdForCriteria[]
}

model CriteriaTokenId {
  tokenId            BigInt               @id
  tokenIdForCriteria TokenIdForCriteria[]
}

model TokenIdForCriteria {
  criteriaHash String
  criteria     Criteria        @relation(fields: [criteriaHash], references: [hash], onDelete: Cascade)
  tokenId      BigInt
  token        CriteriaTokenId @relation(fields: [tokenId], references: [tokenId], onDelete: Cascade)

  /// createdAt field for many to many workaround
  /// https://github.com/MichalLytek/typegraphql-prisma/issues/19#issuecomment-907747110
  createdAt   DateTime @default(now())

  @@id([criteriaHash, tokenId])
}

model PeerStore {
  key  String @id
  data Bytes
}

model DHT {
  key  String @id
  data Bytes
}

model EthHeaders {
  hash      String   @id
  number    String
  parent    String
  timestamp DateTime
  logs      Bytes
}
