datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../node_modules/@generated/type-graphql"
}

model OfferItem {
  id String @id @default(cuid())

  itemType             Int
  token                String
  identifierOrCriteria String
  startAmount          String
  endAmount            String

  order     Order  @relation(fields: [orderHash], references: [hash], onDelete: Cascade)
  orderHash String
}

model ConsiderationItem {
  id String @id @default(cuid())

  itemType             Int
  token                String
  identifierOrCriteria String
  startAmount          String
  endAmount            String

  recipient String

  order     Order  @relation(fields: [orderHash], references: [hash], onDelete: Cascade)
  orderHash String
}

model Order {
  hash String @id @unique

  offer         OfferItem[]
  consideration ConsiderationItem[]

  offerer    String
  signature  String
  orderType  Int
  startTime  Int
  endTime    Int
  counter    Int
  salt       String
  conduitKey String
  zone       String
  zoneHash   String

  // Basic Order
  additionalRecipients String? /// comma-separated

  // Advanced Order
  numerator   String?
  denominator String?
  extraData   String?

  // Metadata
  chainId  String /// string decimal
  metadata OrderMetadata?
}

model OrderMetadata {
  orderHash String   @id
  createdAt DateTime @default(now())

  isValid     Boolean
  isCancelled Boolean

  isAuction Boolean /// when order is restricted and zone is an EOA. in the future may have whitelisted "auction" zones

  isFullyFulfilled   Boolean
  lastFulfilledAt    DateTime?
  lastFulfilledPrice String?

  isPinned  Boolean @default(false)
  isRemoved Boolean @default(false)

  lastValidatedBlockNumber String?
  lastValidatedBlockHash   String?

  order Order @relation(fields: [orderHash], references: [hash], onDelete: Cascade)
}

model NodeStatus {
  chainId                           String   @id /// string decimal
  ethRPCRequestsSentInCurrentUTCDay Int      @default(0)
  startOfCurrentUTCDay              DateTime @default(now())
}

model Criteria {
  hash     String @id
  tokenIds String /// comma-separated within field, with starting and ending commas for queries %like% ',tokenId,'
  token    String /// token address for the criteria (for more efficient querying)
}

model PeerStore {
  key  String @id
  data Bytes
}

model DHT {
  key  String @id
  data Bytes
}

model EthHeaders {
  hash      String   @id
  number    String
  parent    String
  timestamp DateTime
  logs      Bytes
}

model ERC20TokenPrices {
  token            String   @id /// address, or 'NATIVE'
  usdPricePerToken String
  chainId          String /// decimal string
  updatedAt        DateTime @updatedAt
}
